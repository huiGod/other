
#user  nobody;
#根据CPU核数来设置(1*核数)
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid; worker_rlimit_nofile 51200; 
google_perftools_profiles /tmp/tcmalloc;
events { 
    #网络并发模型 
    use epoll; 
    #并发进程数，可根据访问量适当调整 
    worker_connections  51200; 
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    limit_conn_zone $binary_remote_addr zone=crawler:20m;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

     #自定义访问日志格式
    log_format szwcl '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" "$http_x_up_calling_line_id $http_x_up_subno $http_x_network_info $http_x_nx_clid" "$http_via"';

    #  access_log  logs/access.log  szwcl;

    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay on;

    ssl_session_cache    shared:SSL:100m;
    ssl_session_timeout  10m;

    keepalive_timeout  65;
    #应许客户端请求的最大的单个文件字节数
    client_max_body_size             300m;
    #缓冲区代理缓冲用户端请求的最大字节数_可以理解为先保存到本地再传给用户
    client_body_buffer_size        128k;
    #客户请求头部buffer大小
    client_header_buffer_size 16k;
    #同上
    #large_client_header_buffers 4 32;
    
    #跟后端服务器连接的超时时间_发起握手等待响应超时时间
    proxy_connect_timeout 600;
    #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理
    proxy_read_timeout 600;
    #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
    proxy_send_timeout 600;
    #代理请求缓存区_这个缓冲区会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可
    proxy_buffer_size 16k;
    #同上 告诉Nginx保存单个用的几个Buffer及最大用多大空间
    proxy_buffers 4 32k;
    #如果系统很忙的时候可以申请最大的proxy_buffers
    proxy_busy_buffers_size 64k;

    proxy_temp_path /usr/local/cache/szwcl 1 2;
    proxy_cache_path /usr/local/cache/szwcl levels=1:2 keys_zone=szwcl:200m inactive=1d max_size=200m;

    #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
    #以$binary_remote_addr 为key,限制平均每秒的请求为10个，
    #1M能存储16000个状态，rete的值必须为整数，
    #如果限制两秒钟一个请求，可以设置成30r/m
    limit_req_zone $binary_remote_addr zone=allips:10m rate=10r/s;

    gzip  on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_types       text/plain application/x-javascript text/css application/xml text/javascript text/vnd.wap.wml;
    gzip_http_version   1.1;
    gzip_comp_level     9;
    gzip_proxied        expired no-cache no-store private auth;
    gzip_disable        "MSIE [1-6] \.";
    gzip_vary           on;

    #负载均衡和反向代理
    upstream  wallpaper_backend {                      
        server   localhost:8044 weight=1 max_fails=2 fail_timeout=30s;
    }

    upstream  app_backend {
        server   localhost:8000 weight=1 max_fails=2 fail_timeout=30s;
    }

    upstream  tj_backend {
        server   localhost:8080 weight=1 max_fails=2 fail_timeout=30s;
    }
   
    upstream  baby_backend {
        server   localhost:8686 weight=1 max_fails=2 fail_timeout=30s;
    }	

    upstream  shuaweb_backend {
        server   localhost:8880 weight=1 max_fails=2 fail_timeout=30s;
    }
   
  
    server
    {
        listen 80 default;
        server_name _;
        return 500;
    }
  

   server {
        listen 80;
        server_name localhost api.bizhi.51app.cn;
        #expires 10m;

        access_log   /data/log/cronolog/wallpaper/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }
 
       location ~* ^.+\.(txt|jpg|jpeg|gif|js|png|css|swf|ico)$ {
           root         /data/project/apiwallpaper;
           access_log   off;
           expires      30d;
        }

        location / {
            root     /data/project/apiwallpaper;
            proxy_redirect     off;
            rewrite ^(/)$  /index.do break;
            proxy_pass http://wallpaper_backend;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        Host $host;
        }
     }

    server {
        listen 80;
        server_name api.app.51app.cn;
        #expires 10m;

        access_log   /data/log/cronolog/app/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }
 
       location ~* ^.+\.(txt|jpg|jpeg|gif|js|png|css|swf|ico)$ {
           root         /data/project/apiapplication;
           access_log   off;
           expires      30d;
        }

        location / {
            root     /data/project/apiapplication;
            proxy_redirect     off;
            rewrite ^(/)$  /index.do break;
            proxy_pass http://app_backend;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        Host $host;
        }
     }

    server {
        listen 80;
        server_name tongji.51app.cn ios.api.51app.cn;
        #expires 10m;

        access_log   /data/log/cronolog/tj/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }

       location ~* ^.+\.(txt|jpg|jpeg|gif|js|png|css|swf|ico)$ {
           root         /data/project/stats;
           access_log   off;
           expires      30d;
        }

        location / {
            root     /data/project/tj;
            proxy_redirect     off;
            #rewrite ^(/)$  /index.do break;
            proxy_pass http://tj_backend;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        Host $host;
        }
     } 

    server {
        listen 80;
        listen 443 ssl;
        server_name api.baby.51app.cn 91zhuanlingqian.com www.91zhuanlingqian.com www.mobilezq.com;
        #expires 10m;
        #ssl on;
        #ssl_certificate     server.cer;
        #ssl_certificate_key server.key;
        #ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers         HIGH:!aNULL:!MD5;

        ssl_certificate /etc/ssl/crt/server.cer;
        ssl_certificate_key /etc/ssl/crt/server.key;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
        ssl_prefer_server_ciphers on;
        access_log   /data/log/cronolog/baby/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }

       location ~* ^.+\.(txt|jpg|jpeg|gif|js|png|css|swf|ico)$ {
           root         /data/project;
           access_log   off;
           expires      30d;
        }

        location / {
            root     /data/project;
            proxy_redirect     off;
            rewrite ^(/)$  /baby/baby.html break;
            proxy_pass http://baby_backend;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        Host $host;
        }
     }

    server {
        listen 80;
        server_name shua.cn www.shua.cn;
        #expires 10m;

        access_log   /data/log/cronolog/shua/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }

       location ~* ^.+\.(txt|jpg|jpeg|gif|js|png|css|swf|ico)$ {
           root         /data/project/shuaweb;
           access_log   off;
           expires      30d;
        }

        location / {
            root     /data/project/shuaweb;
            proxy_redirect     off;
            #rewrite ^(/)$  / break;
            proxy_pass http://shuaweb_backend;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        Host $host;
        }
     }

    server {
        listen 80;
        server_name res.wallpaper.szwcl.com img.bizhi.51app.cn img.app.51app.cn;
        #expires 10m;

        access_log   /data/log/cronolog/wallpaper/access.log   szwcl;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }

        location / {
            root     /data/resource;
            access_log   off;
            expires      30d;
        }
     }

   server {
        listen 88;
        server_name 120.26.206.238;
        #expires 10m;

        access_log   /data/log/cronolog/wallpaper/access.log;
        chunkin on;

        error_page 411 = @my_411_error;
        location @my_411_error {
                chunkin_resume;
        }

        location / {
            root     /data/resource;
            access_log   off;
            expires      30d;
        }
    }
}

